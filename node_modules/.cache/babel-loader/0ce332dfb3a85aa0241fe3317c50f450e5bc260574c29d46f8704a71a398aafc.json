{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\nimport { getPokemon } from '../../app/api-pokemon.tsx';\nconst initialState = {\n  data: [],\n  status: 'idle'\n};\nexport const loadPokemonAsync = createAsyncThunk('load', async () => {\n  const response = await getPokemon();\n  console.log(response);\n  return response;\n});\nexport const pokemonSlice = createSlice({\n  name: 'pokemon',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    /*\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n    */\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(loadPokemonAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(loadPokemonAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.data = loadPokemonAsync.value;\n    });\n  }\n});\n\n//export const {  } = pokemonSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectData = state => state.data;\nexport default pokemonSlice.reducers;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchCount","getPokemon","initialState","data","status","loadPokemonAsync","response","console","log","pokemonSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","value","selectData"],"sources":["/home/dagan/bin/React/pokedex2/src/features/counter/counterSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\nimport { getPokemon } from '../../app/api-pokemon.tsx';\n\nconst initialState = {\n  data: [],\n  status: 'idle',\n};\n\nexport const loadPokemonAsync = createAsyncThunk(\n  'load',\n  async () => {\n    const response = await getPokemon();\n\n    console.log(response);\n\n    return response;\n  }\n);\n\nexport const pokemonSlice = createSlice({\n  name: 'pokemon',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    /*\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n    */\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(loadPokemonAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(loadPokemonAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.data = loadPokemonAsync.value;\n      });\n  },\n});\n\n//export const {  } = pokemonSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectData = (state) => state.data;\n\nexport default pokemonSlice.reducers;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,UAAU,QAAQ,2BAA2B;AAEtD,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,EAAE;EACRC,MAAM,EAAE;AACV,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGP,gBAAgB,CAC9C,MAAM,EACN,YAAY;EACV,MAAMQ,QAAQ,GAAG,MAAML,UAAU,EAAE;EAEnCM,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;EAErB,OAAOA,QAAQ;AACjB,CAAC,CACF;AAED,OAAO,MAAMG,YAAY,GAAGV,WAAW,CAAC;EACtCW,IAAI,EAAE,SAAS;EACfR,YAAY;EACZ;EACAS,QAAQ,EAAE;IACR;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAfI,CAgBD;EACD;EACA;EACAC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACT,gBAAgB,CAACU,OAAO,EAAGC,KAAK,IAAK;MAC5CA,KAAK,CAACZ,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDU,OAAO,CAACT,gBAAgB,CAACY,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACtDF,KAAK,CAACZ,MAAM,GAAG,MAAM;MACrBY,KAAK,CAACb,IAAI,GAAGE,gBAAgB,CAACc,KAAK;IACrC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;;AAEF;;AAEA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAIJ,KAAK,IAAKA,KAAK,CAACb,IAAI;AAE/C,eAAeM,YAAY,CAACE,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}