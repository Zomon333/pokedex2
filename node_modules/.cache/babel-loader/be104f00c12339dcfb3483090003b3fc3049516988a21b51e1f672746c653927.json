{"ast":null,"code":"var _jsxFileName = \"/home/dagan/bin/React/pokedex2/src/App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport { Pokemon } from './features/Pokemon.tsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getArrayStub(len) {\n  /*\n    I know this looks questionable, but hear me out;\n    I'm making an array of n-many integers so I can map over it. Each index of our array is a pokemon.\n    The data isn't baked, technically, so you could in theory load more than the original pokemon if you tried hard enough.\n  */\n  let arr = [len];\n  for (let i = 0; i < len; i++) {\n    arr[i] = i + 1;\n  }\n  return arr;\n}\nfunction App() {\n  _s();\n  const [numPokemon, setNumPokemon] = useState(151);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        desc: \"Number of pokemon you'd like to load: (Default 151, currently ${numPokemon}\",\n        name: \"numPokemon\",\n        children: [\"Number of pokemon you'd like to load: (Default 151, currently $\", numPokemon]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), getArrayStub(151).map(num => {\n        return /*#__PURE__*/_jsxDEV(Pokemon, {\n          id: num\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 28\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/cCsqzhyVgijvcxZHLm1GgRec5g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Pokemon","getArrayStub","len","arr","i","App","numPokemon","setNumPokemon","map","num"],"sources":["/home/dagan/bin/React/pokedex2/src/App.js"],"sourcesContent":["import React from 'react';\nimport {useState} from 'react';\nimport { Pokemon } from './features/Pokemon.tsx'\n\n\nfunction getArrayStub(len)\n{\n    /*\n      I know this looks questionable, but hear me out;\n      I'm making an array of n-many integers so I can map over it. Each index of our array is a pokemon.\n      The data isn't baked, technically, so you could in theory load more than the original pokemon if you tried hard enough.\n    */\n    let arr=[len];\n    for(let i=0; i<len; i++)\n    {\n      arr[i]=i+1;\n    }\n    return arr\n}\n\nfunction App() {\n  const [numPokemon, setNumPokemon] = useState(151);\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input type=\"text\" desc=\"Number of pokemon you'd like to load: (Default 151, currently ${numPokemon}\" name=\"numPokemon\">Number of pokemon you'd like to load: (Default 151, currently ${numPokemon}</input>\n        {\n          getArrayStub(151).map(\n            (num)=>{return <Pokemon id={num}></Pokemon>}\n          )\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,QAAQ,QAAO,OAAO;AAC9B,SAASC,OAAO,QAAQ,wBAAwB;AAAA;AAGhD,SAASC,YAAY,CAACC,GAAG,EACzB;EACI;AACJ;AACA;AACA;AACA;EACI,IAAIC,GAAG,GAAC,CAACD,GAAG,CAAC;EACb,KAAI,IAAIE,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACF,GAAG,EAAEE,CAAC,EAAE,EACvB;IACED,GAAG,CAACC,CAAC,CAAC,GAACA,CAAC,GAAC,CAAC;EACZ;EACA,OAAOD,GAAG;AACd;AAEA,SAASE,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,GAAG,CAAC;EAGjD,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBAClB;MAAQ,SAAS,EAAC,YAAY;MAAA,wBAC5B;QAAO,IAAI,EAAC,MAAM;QAAC,IAAI,EAAC,6EAA6E;QAAC,IAAI,EAAC,YAAY;QAAA,8EAAiEO,UAAU;MAAA;QAAA;QAAA;QAAA;MAAA,QAAS,EAEzML,YAAY,CAAC,GAAG,CAAC,CAACO,GAAG,CAClBC,GAAG,IAAG;QAAC,oBAAO,QAAC,OAAO;UAAC,EAAE,EAAEA;QAAI;UAAA;UAAA;UAAA;QAAA,QAAW;MAAA,CAAC,CAC7C;IAAA;MAAA;MAAA;MAAA;IAAA;EAEI;IAAA;IAAA;IAAA;EAAA,QACL;AAEV;AAAC,GAhBQJ,GAAG;AAAA,KAAHA,GAAG;AAkBZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}