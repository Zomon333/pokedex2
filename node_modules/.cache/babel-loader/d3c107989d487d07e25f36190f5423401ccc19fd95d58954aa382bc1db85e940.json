{"ast":null,"code":"var _jsxFileName = \"/home/dagan/bin/React/pokedex2/src/App.js\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport { useState } from 'react';\nimport Button from '@mui/material/Button';\nimport { Pokemon } from './features/Pokemon.tsx';\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getArrayStub(len) {\n  /*\n    I know this looks questionable, but hear me out;\n    I'm making an array of n-many integers so I can map over it. Each index of our array is a pokemon.\n    The data isn't baked, technically, so you could in theory load more than the original pokemon if you tried hard enough.\n  */\n  let arr = [len];\n  for (let i = 0; i < len; i++) {\n    arr[i] = i + 1;\n  }\n  return arr;\n}\nfunction App() {\n  _s();\n  const [numPokemon, setNumPokemon] = useState(5);\n  const [textField, setTextField] = useState(0);\n  const [childrenElements, setChildrenElements] = useState();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: event => {\n          setTextField(event.target.value);\n        },\n        type: \"text\",\n        desc: \"Number of pokemon you'd like to load: (Default 151, currently ${numPokemon}\",\n        name: \"numPokemon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          marginLeft: \"3em\"\n        },\n        variant: \"contained\",\n        onClick: () => {\n          setNumPokemon(Number.parseInt(textField));\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }, this), \"Currently, \", numPokemon, \" are set to be displayed.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 15\n      }, this), getArrayStub(numPokemon).map(num => {\n        return /*#__PURE__*/_jsxDEV(Pokemon, {\n          id: num\n        }, num, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 28\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mIySpOcOyFRVqv484YrHAq3eZ2w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Button","Pokemon","getArrayStub","len","arr","i","App","numPokemon","setNumPokemon","textField","setTextField","childrenElements","setChildrenElements","event","target","value","marginLeft","Number","parseInt","map","num"],"sources":["/home/dagan/bin/React/pokedex2/src/App.js"],"sourcesContent":["import * as React from 'react';\nimport {useState} from 'react';\n\nimport Button from '@mui/material/Button';\n\nimport { Pokemon } from './features/Pokemon.tsx'\n\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\n\n\nfunction getArrayStub(len)\n{\n    /*\n      I know this looks questionable, but hear me out;\n      I'm making an array of n-many integers so I can map over it. Each index of our array is a pokemon.\n      The data isn't baked, technically, so you could in theory load more than the original pokemon if you tried hard enough.\n    */\n    let arr=[len];\n    for(let i=0; i<len; i++)\n    {\n      arr[i]=i+1;\n    }\n    return arr\n}\n\nfunction App() {\n  const [numPokemon, setNumPokemon] = useState(5);\n  const [textField, setTextField] = useState(0);\n  const [childrenElements, setChildrenElements] = useState();\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n\n        <input onChange={(event)=>{setTextField(event.target.value)}} type=\"text\" desc=\"Number of pokemon you'd like to load: (Default 151, currently ${numPokemon}\" name=\"numPokemon\"></input>\n        <Button style={{marginLeft:\"3em\"}} variant=\"contained\" onClick={()=>{setNumPokemon(Number.parseInt(textField))}}>Submit</Button>\n        <br /><br />\n        Currently, {numPokemon} are set to be displayed.\n        <br /><br />\n        {\n          getArrayStub(numPokemon).map(\n            (num)=>{return <Pokemon key={num} id={num}></Pokemon>}\n          )\n        }\n\n        \n      </header>\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAQC,QAAQ,QAAO,OAAO;AAE9B,OAAOC,MAAM,MAAM,sBAAsB;AAEzC,SAASC,OAAO,QAAQ,wBAAwB;AAEhD,OAAO,4BAA4B;AACnC,OAAO,4BAA4B;AACnC,OAAO,4BAA4B;AACnC,OAAO,4BAA4B;AAAC;AAGpC,SAASC,YAAY,CAACC,GAAG,EACzB;EACI;AACJ;AACA;AACA;AACA;EACI,IAAIC,GAAG,GAAC,CAACD,GAAG,CAAC;EACb,KAAI,IAAIE,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACF,GAAG,EAAEE,CAAC,EAAE,EACvB;IACED,GAAG,CAACC,CAAC,CAAC,GAACA,CAAC,GAAC,CAAC;EACZ;EACA,OAAOD,GAAG;AACd;AAEA,SAASE,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACY,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGb,QAAQ,EAAE;EAG1D,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBAClB;MAAQ,SAAS,EAAC,YAAY;MAAA,wBAG5B;QAAO,QAAQ,EAAGc,KAAK,IAAG;UAACH,YAAY,CAACG,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;QAAA,CAAE;QAAC,IAAI,EAAC,MAAM;QAAC,IAAI,EAAC,6EAA6E;QAAC,IAAI,EAAC;MAAY;QAAA;QAAA;QAAA;MAAA,QAAS,eACvL,QAAC,MAAM;QAAC,KAAK,EAAE;UAACC,UAAU,EAAC;QAAK,CAAE;QAAC,OAAO,EAAC,WAAW;QAAC,OAAO,EAAE,MAAI;UAACR,aAAa,CAACS,MAAM,CAACC,QAAQ,CAACT,SAAS,CAAC,CAAC;QAAA,CAAE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAgB,eAChI;QAAA;QAAA;QAAA;MAAA,QAAM;QAAA;QAAA;QAAA;MAAA,QAAM,iBACAF,UAAU,4CACtB;QAAA;QAAA;QAAA;MAAA,QAAM;QAAA;QAAA;QAAA;MAAA,QAAM,EAEVL,YAAY,CAACK,UAAU,CAAC,CAACY,GAAG,CACzBC,GAAG,IAAG;QAAC,oBAAO,QAAC,OAAO;UAAW,EAAE,EAAEA;QAAI,GAAbA,GAAG;UAAA;UAAA;UAAA;QAAA,QAAqB;MAAA,CAAC,CACvD;IAAA;MAAA;MAAA;MAAA;IAAA;EAII;IAAA;IAAA;IAAA;EAAA,QAEL;AAEV;AAAC,GA3BQd,GAAG;AAAA,KAAHA,GAAG;AA6BZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}