{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\nimport { getPokemon } from '../../app/api-pokemon.tsx';\nconst initialState = {\n  data: [],\n  status: 'idle'\n};\nexport const loadPokemonAsync = createAsyncThunk('load', async () => {\n  const response = await getPokemon();\n  return response.data;\n});\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(loadPokemonAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(loadPokemonAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.data = action.payload;\n    });\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = state => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchCount","getPokemon","initialState","data","status","loadPokemonAsync","response","counterSlice","name","reducers","increment","state","value","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter","incrementIfOdd","amount","dispatch","getState","currentValue","reducer"],"sources":["/home/dagan/bin/React/pokedex2/src/features/counter/counterSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\nimport { getPokemon } from '../../app/api-pokemon.tsx';\n\nconst initialState = {\n  data: [],\n  status: 'idle',\n};\n\nexport const loadPokemonAsync = createAsyncThunk(\n  'load',\n  async () => {\n    const response = await getPokemon();\n\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(loadPokemonAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(loadPokemonAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.data = action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,UAAU,QAAQ,2BAA2B;AAEtD,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,EAAE;EACRC,MAAM,EAAE;AACV,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGP,gBAAgB,CAC9C,MAAM,EACN,YAAY;EACV,MAAMQ,QAAQ,GAAG,MAAML,UAAU,EAAE;EAEnC,OAAOK,QAAQ,CAACH,IAAI;AACtB,CAAC,CACF;AAED,OAAO,MAAMI,YAAY,GAAGR,WAAW,CAAC;EACtCS,IAAI,EAAE,SAAS;EACfN,YAAY;EACZ;EACAO,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpB;MACA;MACA;MACA;MACAA,KAAK,CAACC,KAAK,IAAI,CAAC;IAClB,CAAC;IACDC,SAAS,EAAGF,KAAK,IAAK;MACpBA,KAAK,CAACC,KAAK,IAAI,CAAC;IAClB,CAAC;IACD;IACAE,iBAAiB,EAAE,CAACH,KAAK,EAAEI,MAAM,KAAK;MACpCJ,KAAK,CAACC,KAAK,IAAIG,MAAM,CAACC,OAAO;IAC/B;EACF,CAAC;EACD;EACA;EACAC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACd,gBAAgB,CAACe,OAAO,EAAGT,KAAK,IAAK;MAC5CA,KAAK,CAACP,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDe,OAAO,CAACd,gBAAgB,CAACgB,SAAS,EAAE,CAACV,KAAK,EAAEI,MAAM,KAAK;MACtDJ,KAAK,CAACP,MAAM,GAAG,MAAM;MACrBO,KAAK,CAACR,IAAI,GAAGY,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEN,SAAS;EAAEG,SAAS;EAAEC;AAAkB,CAAC,GAAGP,YAAY,CAACe,OAAO;;AAE/E;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAIZ,KAAK,IAAKA,KAAK,CAACa,OAAO,CAACZ,KAAK;;AAEzD;AACA;AACA,OAAO,MAAMa,cAAc,GAAIC,MAAM,IAAK,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EAChE,MAAMC,YAAY,GAAGN,WAAW,CAACK,QAAQ,EAAE,CAAC;EAC5C,IAAIC,YAAY,GAAG,CAAC,KAAK,CAAC,EAAE;IAC1BF,QAAQ,CAACb,iBAAiB,CAACY,MAAM,CAAC,CAAC;EACrC;AACF,CAAC;AAED,eAAenB,YAAY,CAACuB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}