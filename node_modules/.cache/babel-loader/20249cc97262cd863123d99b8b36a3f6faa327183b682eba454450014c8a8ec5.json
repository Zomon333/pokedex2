{"ast":null,"code":"var _jsxFileName = \"/home/dagan/bin/React/pokedex2/src/App.js\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport { useState } from 'react';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport { Pokemon } from './features/Pokemon.tsx';\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [numPokemon, setNumPokemon] = useState(5);\n  const [textField, setTextField] = useState(0);\n  const getArrayStub = len => {\n    /*\n      I know this looks questionable, but hear me out;\n      I'm making an array of n-many integers so I can map over it. Each index of our array is a pokemon.\n      The data isn't baked, technically, so you could in theory load more than the original pokemon if you tried hard enough.\n    */\n    let arr = [len];\n    for (let i = 0; i < len; i++) {\n      arr[i] = i + 1;\n    }\n    return arr;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        style: {\n          margin: \"3em\"\n        },\n        onChange: event => {\n          setTextField(event.target.value);\n        },\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          margin: \"3em\"\n        },\n        variant: \"contained\",\n        onClick: () => {\n          setNumPokemon(Number.parseInt(textField));\n        },\n        children: \"Show me more pokemon!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 15\n      }, this), \"Currently, \", !isNaN(numPokemon) ? numPokemon : 0, \" are set to be displayed.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }, this), \"Note to the professor: Yes, this can load all 151 requested pokemon; and more!\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 15\n      }, this), getArrayStub(numPokemon).map(num => {\n        return /*#__PURE__*/_jsxDEV(Pokemon, {\n          id: num\n        }, num, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 28\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"M8UZGGi/7DWrWRxlhSKP+YNOmg0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Button","TextField","Pokemon","App","numPokemon","setNumPokemon","textField","setTextField","getArrayStub","len","arr","i","margin","event","target","value","Number","parseInt","isNaN","map","num"],"sources":["/home/dagan/bin/React/pokedex2/src/App.js"],"sourcesContent":["import * as React from 'react';\nimport {useState} from 'react';\n\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n\nimport { Pokemon } from './features/Pokemon.tsx'\n\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\n\n\nfunction App() {\n  const [numPokemon, setNumPokemon] = useState(5);\n  const [textField, setTextField] = useState(0);\n\n  const getArrayStub =(len)=>\n  {\n      /*\n        I know this looks questionable, but hear me out;\n        I'm making an array of n-many integers so I can map over it. Each index of our array is a pokemon.\n        The data isn't baked, technically, so you could in theory load more than the original pokemon if you tried hard enough.\n      */\n      let arr=[len];\n      for(let i=0; i<len; i++)\n      {\n        arr[i]=i+1;\n      }\n      return arr\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n        <TextField style={{margin:\"3em\"}} onChange={(event)=>{setTextField(event.target.value)}}> </TextField>\n        <Button style={{margin:\"3em\"}} variant=\"contained\" onClick={()=>{setNumPokemon(Number.parseInt(textField))}}>Show me more pokemon!</Button>\n        <br /><br />\n        Currently, {(!isNaN(numPokemon)) ? numPokemon : 0} are set to be displayed.\n        <br /><br />\n        Note to the professor: Yes, this can load all 151 requested pokemon; and more!\n        <br /><br />\n        {\n          getArrayStub(numPokemon).map(\n            (num)=>{return <Pokemon key={num} id={num}></Pokemon>}\n          )\n        }\n\n\n      </header>\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAQC,QAAQ,QAAO,OAAO;AAE9B,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,SAAS,MAAM,yBAAyB;AAE/C,SAASC,OAAO,QAAQ,wBAAwB;AAEhD,OAAO,4BAA4B;AACnC,OAAO,4BAA4B;AACnC,OAAO,4BAA4B;AACnC,OAAO,4BAA4B;AAAC;AAGpC,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAE7C,MAAMS,YAAY,GAAGC,GAAG,IACxB;IACI;AACN;AACA;AACA;AACA;IACM,IAAIC,GAAG,GAAC,CAACD,GAAG,CAAC;IACb,KAAI,IAAIE,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACF,GAAG,EAAEE,CAAC,EAAE,EACvB;MACED,GAAG,CAACC,CAAC,CAAC,GAACA,CAAC,GAAC,CAAC;IACZ;IACA,OAAOD,GAAG;EACd,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBAClB;MAAQ,SAAS,EAAC,YAAY;MAAA,wBAE5B,QAAC,SAAS;QAAC,KAAK,EAAE;UAACE,MAAM,EAAC;QAAK,CAAE;QAAC,QAAQ,EAAGC,KAAK,IAAG;UAACN,YAAY,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;QAAA,CAAE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAc,eACtG,QAAC,MAAM;QAAC,KAAK,EAAE;UAACH,MAAM,EAAC;QAAK,CAAE;QAAC,OAAO,EAAC,WAAW;QAAC,OAAO,EAAE,MAAI;UAACP,aAAa,CAACW,MAAM,CAACC,QAAQ,CAACX,SAAS,CAAC,CAAC;QAAA,CAAE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAA+B,eAC3I;QAAA;QAAA;QAAA;MAAA,QAAM;QAAA;QAAA;QAAA;MAAA,QAAM,iBACC,CAACY,KAAK,CAACd,UAAU,CAAC,GAAIA,UAAU,GAAG,CAAC,4CACjD;QAAA;QAAA;QAAA;MAAA,QAAM;QAAA;QAAA;QAAA;MAAA,QAAM,iGAEZ;QAAA;QAAA;QAAA;MAAA,QAAM;QAAA;QAAA;QAAA;MAAA,QAAM,EAEVI,YAAY,CAACJ,UAAU,CAAC,CAACe,GAAG,CACzBC,GAAG,IAAG;QAAC,oBAAO,QAAC,OAAO;UAAW,EAAE,EAAEA;QAAI,GAAbA,GAAG;UAAA;UAAA;UAAA;QAAA,QAAqB;MAAA,CAAC,CACvD;IAAA;MAAA;MAAA;MAAA;IAAA;EAII;IAAA;IAAA;IAAA;EAAA,QAEL;AAEV;AAAC,GAzCQjB,GAAG;AAAA,KAAHA,GAAG;AA2CZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}